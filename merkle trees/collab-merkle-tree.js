const { MerkleTree } = require("merkletreejs");
const keccak256 = require("keccak256");

let whitelist = [
  "0x73c51b6cf362cEA1665878662ff3191b60DaFd8F",
  "0x83532f37Ef4C23767d042f55dD1A1098ea47b823",
  "0x4e116e24cdDf5e8Ca3Ac977513814Fa3Ad079405",
  "0x51021BFa9313A2770De766eDbf39dC43c47c117e",
  "0x30d1c5063981e52A1e156336b7E15F9832Db8d55",
  "0x8f2df56bCeCB03e9118a8c78b454e7eCf1592872",
  "0x7A53e5f8B171220F60eCE569c77CB236Fdf35A15",
  "0x3B1e0dBf7D2bE3e3ca063aBF122a57B3602fAEBC",
  "0x35CC53a869771Db4258947764277651dA933D081",
  "0x8e3909F28339d49cE57B6c1a7d46255F9C8746F1",
  "0x9B51F735d58D6FfeaaEC31ed5b5D0Ad881db6204",
  "0x29F1B3EA36c4aB31Da1d002e267EBD964f2f3b41",
  "0x45473Ebee8392B01b0ecF46ED3d21671fE6500C6",
  "0xDB7a005A77D479c6Cc48282d55A0391Fd8735994",
  "0xD87601e05e8D33871A5f95995A9768bDbf64Cc98",
  "0xB573D55bB681b091cA01ef0E78D519ED26238C38",
  "0x2aB317981Bc8E09460C0fd761453F4117945BCE8",
  "0x2d543e1cFbA66B7Fd85D8E843A22b62bc4fCd530",
  "0xf389FD55b011817C372312315467A3830E985127",
  "0xcc1331906a9e11D2A5d17fF39B83FE0B4e85c667",
  "0x06B33B5e0161e697dA35C7AB1130759ed2368084",
  "0xacCF2BA1882Bb42d92Df8FA99DfC1290daAeFEAF",
  "0xA882fB71aA1967A6a8aa11375F8abd5FeE5BDD6a",
  "0x4Ef648ad96DB020111a3A0e7Bce4Ff6e1Af3dA68",
  "0x79137d62f126836f96fed0fe044c7c0023f6cd15",
  "0xE747820F098E11F1dE8f7A3a8FC671704c19A5a7",
  "0x39773F9Ed6d8C5555e825251C5648BD60D213444",
  "0xf88328c3Aa27e83F348808dDAeec2494CF577C04",
  "0xD8c3F4114a2a6bB44519Af31D01E4CDC868AfC81",
  "0x8F88BBb04EDD8E93b24f6AC2F4B05b31D877b905",
  "0x1a8f1A92a46b766A1773d8dB003cb74432387Daa",
  "0x5eD82129A69932182D74d36A882D4122238F6B54",
  "0x01180F770161351e946f6665befA13beb56898fA",
  "0x8520201Ec6Ab08AA35270efDCF28b51a826bcd97",
  "0x17b8909a6fFA2C0255BB0dE6Be9E5A4A768690c2",
  "0x06fAC54086936c4F3dc37Ff3E47f45cf59105825",
  "0x0C96A245E754B548bCe323ced3Ef6412243bDBe8",
  "0xB361b55b2bC39099853595bfaB7a87c5c3e350Be",
  "0x29aFf5B6DebB19D5600b7ECdc62A76A40ADd8488",
  "0x6Dd9fD63a53Caee58e254dC41f644a8d1948Fe50",
  "0xA2F15Be36D04cD8B46431e71990af499b0Db5643",
  "0xaaFb164259D27122530Aef535DCD059F5B3Dc844",
  "0x29258bfB5ad2288c835A290828fd40Cd6AaAAA74",
  "0x128A7ee5E9EB664172966F34AFAC82234C897E68",
  "0xB6C567A0a1B88293e803f2db1BC9bCd77487C2bF",
  "0x1CC97DBD54aafB4F9278E20448c26348BE449748",
  "0x2A27E5174b9a6EF1F8Cd32504Ba72Ca94ed9135F",
  "0x922b7Ebf28ce398E1Ae7c70f4bbC2443Fe4B47b2",
  "0x82Fa469d7d1aEeFc50fd16dFE96fEaA3f7e0fe63",
  "0x7d80CfC6B45afF2E0D91F6624F69504b9487Aa13",
  "0xE22559B24dD5AA74fe31F67F39E0aAda3974Bb2a",
  "0x871984c1A8d6Fd3ab3DcC0C651b74a0Ca6263247",
  "0x2d40a68d0ff646dbef8239d8b1d57c8545de0170",
  "0x21fbec9b5916429db5dbfa375344cdfe8c3ac384",
  "0x0Bd57CBe73F8A747Ae66f9D6c27144d48aB0069e",
  "0x6dad43ab5a7f43be5d4386a9ca43c856bf7b5408",
  "0xa0BC9F544453061B18202a377854ae28F837cD24",
  "0x149C34E9297a38367cf343446e123Cc5fB56bDF0",
  "0xD15E6d1e557472561Fa06b84B86E575492DA74Ba",
  "0x6Ea7f39b8638134b07B6A4E1B4dF4785A3B4aF41",
  "0xc246E54908d557EE77516949E43e1E75098c95a1",
  "0x972F479fd93A95E16DbF0E1542E367df252C661F",
  "0x78720C64EE0d5383fdda64Fe219ef2a8aFAe0133",
  "0xd061Fe61F3ff7C0614BAAB9cfB4E060ADE0DdcC8",
  "0x7b7733d46E3582E9AF0C6418bE532Af5a21A812b",
  "0x5484CB6eaAe5d3fCA8E43C65FE4CF6d8400d866D",
  "0x7C2bA9011a43C3982D9f0835243CeF142E0210A6",
  "0xE9591784d3F575d21AAC9412fD21f6EcDccfABeB",
  "0xE5547C14A6FeD4C1D6dBC4DE1677A5b9F04b390f",
  "0x038b716928a41EA42253ac043aF4F8Fdcd940098",
  "0xc0d258ff07e18c1b0edbd36837d902a102ad8525",
  "0x15CF127155bD8150337c639dCB3389CB1FA7e513",
  "0x458aa4EA733844Fb020a4ffAb679d861dEFBfA9f",
  "0xdA99519DcFb1bCC8Fc58Ec9681584eA54EfD75cc",
  "0xefE3cE598D49056828e8f4694e5AE2C988D57f04",
  "0xb728e8982b800cdDAF9a5c9307f63B80D9Ab4B4a",
  "0x2e991192756B3C82cA4aF3d9eB946130b3763F7f",
  "0xf8CeC2f2AdE0299294A59D37B7eD6345B23cf29B",
  "0x2006a5AE5b4e366CC2c81F87388f86684bFC6beB",
  "0x11D219f0Da759C83eC422084De69E2A11E6AeebA",
  "0x598257E3f4Cf6D5782ADc66B78B9dc85dde8D2e6",
];

const testWl = [
  //Brave
  "0xe10556775EBE4F5f04f86dcb72e7b7A0E80c5B1a",
  "0x110A4D9b610C7720E9d6b25aaFEaA5543D5406d7",
  // Remix
  "0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB",
  "0x617F2E2fD72FD9D5503197092aC168c91465E7f2",
  "0x17F6AD8Ef982297579C203069C1DbfFE4348c372",
  "0x5c6B0f7Bf3E7ce046039Bd8FABdfD3f9F5021678",
  //Hardhat
  "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
];

const leaves = whitelist.map((address) =>
  keccak256(Buffer.from(address.toLowerCase().replace(/^0x/, ""), "hex"))
);
const merkleTree = new MerkleTree(leaves, keccak256, { sort: true });

const rootHash = merkleTree.getHexRoot();
// console.log("Merkle Tree: ", merkleTree.toString());
console.log("Root Hash: ", rootHash);

// Frontend Get Hex Proof
const wlAddress = "0x73c51b6cf362cEA1665878662ff3191b60DaFd8F";
const claimHex = keccak256(
  Buffer.from(wlAddress.toLowerCase().replace(/^0x/, ""), "hex")
);
// console.log("Claim Hex: ", claimHex);
const hexProof = merkleTree.getHexProof(claimHex);
const proof = JSON.stringify(hexProof);
console.log("Claiming Addresses: ", proof);
